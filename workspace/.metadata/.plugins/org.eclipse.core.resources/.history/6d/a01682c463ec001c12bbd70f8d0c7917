package persistidor.api;

import persistidor.excepciones.NoExisteSesionException;

public interface IPersistentObject
{
	// Almacena la instancia del objeto o asociada a la clave sId, 
		// o actualiza la instancia existente retornando true o false 
		// segun actualiza o almacena. 
		// El objeto o puede ser null, en tal caso el valor que se 
		// almacenara sera null.
	/**
     * retorna y elimina la instancia de clazz vinculada a la
     * clave sId, o retorna null si no existe dicha instancia
    **/
	boolean store(long sId, Object o);
	
	// Devuelve la instancia del objeto o asociada a la clave sId.
	/**
     * retorna y elimina la instancia de clazz vinculada a la
     * clave sId, o retorna null si no existe dicha instancia
    **/
	<T> T load(long sId, Class<T> clazz) throws NoExisteSesionException;
	
	// Retorna true o false seg√∫n exista o un una instancia
	// de clazz (aunque sea null) asociada a la clave sId.
	/**
     * retorna y elimina la instancia de clazz vinculada a la
     * clave sId, o retorna null si no existe dicha instancia
    **/
	<T> boolean exists(long sId, Class<T> clazz) throws NoExisteSesionException;
	
	// Retorna (en milisegundos) el tiempo transcurrido 
	// desde el ultimo acceso registrado para la clave sId, 
	// sin considerar las llamadas a este metodo ni a exists.
	/**
     * retorna y elimina la instancia de clazz vinculada a la
     * clave sId, o retorna null si no existe dicha instancia
    **/
	long elapsedTime(long sId) throws NoExisteSesionException;
	
	/**
     * retorna y elimina la instancia de clazz vinculada a la
     * clave sId, o retorna null si no existe dicha instancia
    **/
	<T> T delete(long sId, Class<T> clazz) throws NoExisteSesionException;
}

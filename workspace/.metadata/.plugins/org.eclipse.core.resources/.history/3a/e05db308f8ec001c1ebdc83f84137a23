package persistidor.controladores;

import java.util.ArrayList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import persistidor.api.IPersistentObject;
import persistidor.excepciones.NoExisteSesionException;

@RestController
public class ControladorParaPruebas
{
	@Autowired
	private IPersistentObject persistentObject;
	
	@GetMapping("store/{id}")
    public ResponseEntity<?> insert(@PathVariable("id") Integer sId)
    {
		Persona persona = CrearPersonaEjemplo();
		
		boolean exists = persistentObject.store(sId, persona);
		
		return new ResponseEntity<Boolean>(exists, HttpStatus.OK);
    }
	
//	@GetMapping("load/{id}")
//    public ResponseEntity<Objeto> load(@PathVariable("id") Integer sId)
//    {
//		Sesion sesion = servicioDeSesiones.obtenerSesionPorId(sId);
//		
//		return new ResponseEntity<Objeto>(sesion.getObjetos().get(0), HttpStatus.OK);
//    }
	
	@GetMapping("exists/{id}/{nombreDeClase}")
    public ResponseEntity<?> exists(@PathVariable("id") Integer sId, @PathVariable("nombreDeClase") String nombreDeClase)
    {
		try
		{
			Class<?> clase = Class.forName(nombreDeClase);
			
			boolean exists = persistentObject.exists(sId, clase);
			
			return new ResponseEntity<Boolean>(exists, HttpStatus.OK);
		}
		catch (NoExisteSesionException ex)
		{
			return new ResponseEntity<String>(ex.getMessage(), HttpStatus.BAD_REQUEST);
		}
		catch (ClassNotFoundException ex)
		{
			return new ResponseEntity<String>("No existe clase de nombre; " + ex.getMessage(), HttpStatus.BAD_REQUEST);
		}
    }
	
//	@GetMapping("eliminar/{id}")
//    public ResponseEntity<?> delete(@PathVariable("id") Integer sId)
//    {
//		
//		
//		return new ResponseEntity<String>("", HttpStatus.OK);
//    }
	
	@GetMapping("elapsedTime/{id}")
    public ResponseEntity<?> elapsedTime(@PathVariable("id") Integer sId)
    {
		try
		{
			long elapsedTime = persistentObject.elapsedTime(sId);
			
			return new ResponseEntity<Long>(elapsedTime, HttpStatus.OK);
		}
		catch (NoExisteSesionException ex)
		{
			return new ResponseEntity<String>(ex.getMessage(), HttpStatus.BAD_REQUEST);
		}
    }
	
	private Persona CrearPersonaEjemplo()
	{
		Direccion laMejorDireccion = new Direccion("Cuenca", 1235, "C1245DQW", "CABA", "CABA", "Argentina");
		Direccion direccion1 = new Direccion("Corrientes", 452, "B5514ABC", "Buenos Aires", "Buenos Aires", "Argentina");
		Direccion direccion2 = new Direccion("Pedro Moran", 2345, "ABC123", "Buzios", "Rio de Janeiro", "Brasil");
		
		ArrayList<Direccion> direcciones = new ArrayList<Direccion>();
		direcciones.add(direccion1);
		direcciones.add(direccion2);
		
		ArrayList<String> telefonos = new ArrayList<String>();
		telefonos.add("4444-2222");
		telefonos.add("5555-3333");
		telefonos.add("6666-4444");
		
		return new Persona("123", "Pepe", telefonos, laMejorDireccion, direcciones);
	}
}

package persistidor.comandos;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import persistidor.entidades.Objeto;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import persistidor.entidades.Atributo;
import persistidor.entidades.Clase;
import persistidor.entidades.Valor;
import persistidor.excepciones.TipoOValorInvalidoException;

@Component
public class CrearEntidadObjetoDesdeUnObjectComando implements ICrearEntidadObjetoDesdeUnObjectComando
{
	@Autowired
	private ICrearEntidadClaseDesdeClassComando crearEntidadClaseDesdeClassComando;
	
	public Objeto ejecutar(Object o) throws TipoOValorInvalidoException
	{
		Class clase = o.getClass();
		Clase entidadClase = crearEntidadClaseDesdeClassComando.ejecutar(clase);
		List<Valor> entidadesValores = obtenerEntidadesValor(clase, entidadClase, o);
		
		return new Objeto(entidadClase, entidadesValores);
	}
	
	private List<Valor> obtenerEntidadesValor(Class clase, Clase entidadClase, Object o) throws TipoOValorInvalidoException
	{
		try
		{
			List<Valor> entidadesValores = new ArrayList<Valor>();
			Field[] atributos = clase.getDeclaredFields();
			for (Field atributo : atributos)
			{
				Atributo entidadAtributoRelacionada = obtenerEntidadAtributoRelacionada(entidadClase, atributo);
				
				if (entidadAtributoRelacionada.esPrimitivo() && !entidadAtributoRelacionada.esColeccion())
				{
					String valorDelAtributo = atributo.get(o).toString();
					entidadesValores.add(new Valor(valorDelAtributo, entidadAtributoRelacionada));
				}
				
				if (entidadAtributoRelacionada.esPrimitivo() && entidadAtributoRelacionada.esColeccion())
				{
					Collection coleccion = (Collection)atributo.get(0);
					for (Object valorDeColeccion : coleccion)
					{
						String valorDelAtributo = valorDeColeccion.toString();
						entidadesValores.add(new Valor(valorDelAtributo, entidadAtributoRelacionada));
					}
				}
			}
			
			return entidadesValores;
		}
		catch (IllegalArgumentException | IllegalAccessException ex)
		{
			throw new TipoOValorInvalidoException("Error al intentar obtener valor de atributo");
		}
	}
	
	private Atributo obtenerEntidadAtributoRelacionada(Clase entidadClase, Field atributo)
	{
		for (Atributo entidadAtributo : entidadClase.getAtributos())
		{
			if (entidadAtributo.getNombre() == atributo.getName())
			{
				return entidadAtributo;
			}
		}
		
		return null;
	}
}

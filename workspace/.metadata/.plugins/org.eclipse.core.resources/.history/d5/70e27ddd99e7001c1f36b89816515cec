package persistidor.servicios;

import java.util.HashSet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import persistidor.entidades.Atributo;
import persistidor.entidades.Clase;
import persistidor.entidades.Objeto;
import persistidor.entidades.Valor;
import persistidor.repositorios.RepositorioDeObjetos;
import persistidor.repositorios.RepositorioDeValores;

@Service
public class ServicioDeObjetos
{
	@Autowired
	private RepositorioDeObjetos repositorioDeObjetos;
	
	@Autowired
	private RepositorioDeValores repositorioDeValores;
	
	public void eliminarObjetoPorId(long idObjeto)
	{
		Objeto objetoPadre = repositorioDeObjetos.findById(idObjeto).orElse(null);
		
		HashSet<Objeto> objetosAEliminar = new HashSet<Objeto>();
		HashSet<Valor> valoresAEliminar = new HashSet<Valor>();
		objetosYValoresAEliminar(objetoPadre, objetosAEliminar, valoresAEliminar);
		
		Clase clasePadre = objetoPadre.getClase();
		
		HashSet<Clase> clasesAEliminar = new HashSet<Clase>();
		HashSet<Atributo> atributosAEliminar = new HashSet<Atributo>();
		clasesYAtributosAEliminar(clasePadre, clasesAEliminar, atributosAEliminar);
		
		for (Valor valor : valoresAEliminar)
		{
			if (valor.tieneRelaciones())
			{
				valor.limpiarRelaciones();
				repositorioDeValores.save(valor);
			}
		}
		
		for (Atributo atributo : atributosAEliminar)
		{
			System.out.println("Atributo a eliminar: " + atributo.getId());
		}
		
		for (Objeto objeto : objetosAEliminar)
		{
			System.out.println("Objeto a eliminar: " + objeto.getId());
		}
		
		for (Atributo atributo : atributosAEliminar)
		{
			System.out.println("Atributo a eliminar: " + atributo.getId());
		}
	}
	
	private void objetosYValoresAEliminar(Objeto objeto, HashSet<Objeto> objetosAEliminar, HashSet<Valor> valoresAEliminar)
	{
		objetosAEliminar.add(objeto);

		for (Valor valor : objeto.getValores())
		{
			valoresAEliminar.add(valor);
			
			Objeto valorObjeto = valor.getValorObjeto();
			
			if (valorObjeto != null)
			{
				objetosYValoresAEliminar(valorObjeto, objetosAEliminar, valoresAEliminar);
			}
		}
	}
	
	private void clasesYAtributosAEliminar(Clase clase, HashSet<Clase> clasesAEliminar, HashSet<Atributo> atributosAEliminar)
	{
		clasesAEliminar.add(clase);

		for (Atributo atributo : clase.getAtributos())
		{
			atributosAEliminar.add(atributo);
			
			Clase claseTipo = atributo.getTipoClase();
			
			if (claseTipo != null)
			{
				clasesYAtributosAEliminar(claseTipo, clasesAEliminar, atributosAEliminar);
			}
		}
	}
}

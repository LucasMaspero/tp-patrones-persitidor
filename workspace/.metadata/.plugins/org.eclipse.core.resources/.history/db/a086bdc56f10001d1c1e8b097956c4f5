package persistidor.comandos;

import java.lang.reflect.Field;
import java.util.List;
import org.springframework.stereotype.Component;
import persistidor.entidades.Atributo;
import persistidor.entidades.Clase;
import persistidor.entidades.Objeto;
import persistidor.entidades.Primitivo;
import persistidor.entidades.Valor;
import persistidor.excepciones.StructureChangedException;

@Component
public class CrearObjectDesdeEntidadObjetoComando implements ICrearObjectDesdeEntidadObjetoComando
{
	public <T> T ejecutar(Objeto entidadObjeto) throws StructureChangedException
	{
		try
		{
			Clase entidadClase = entidadObjeto.getClase();
			String nombreDeClase = entidadClase.getNombre();
			Class<?> clase = Class.forName(nombreDeClase);
			Object objeto = clase.newInstance();
			List<Valor> entidadesValor = entidadObjeto.getValores();
			
			for (Valor entidadValor : entidadesValor)
			{
				Atributo entidadAtributo = entidadValor.getAtributo();
				String nombreAtributo = entidadAtributo.getNombre();
				boolean esPrimitivo = entidadAtributo.esPrimitivo();
				boolean esColeccion = entidadAtributo.getEsColeccion();
				Field atributo = clase.getDeclaredField(nombreAtributo);
				Primitivo entidadPrimitivo;
				String nombrePrimitivo;
				String valorPrimitivo;
				Object primitivoCasteado;
				Objeto entidadObjetoDeValorObjeto;
				Object valorObjeto;
				
				atributo.setAccessible(true);
				
				if (esPrimitivo)
				{
					entidadPrimitivo = entidadAtributo.getTipoPrimitivo();
					nombrePrimitivo = entidadPrimitivo.getNombre();
					valorPrimitivo = entidadValor.getValorPrimitivo();
					primitivoCasteado = obtenerValorPrimitivoCasteado(nombrePrimitivo, valorPrimitivo);
				}
				else
				{
					entidadObjetoDeValorObjeto = entidadValor.getValorObjeto();
					valorObjeto = ejecutar(entidadObjetoDeValorObjeto);
				}
				
				if (esColeccion)
				{
					if (esPrimitivo)
					{
						Primitivo entidadPrimitivo = entidadAtributo.getTipoPrimitivo();
						String valorPrimitivo = entidadValor.getValorPrimitivo();
						
						// Inicializar el array, si no fue inicializado anteriormente:
						String nombreAtributo = entidadAtributo.getNombre();
						Field atributo = clase.getDeclaredField(nombreAtributo);
						atributo.setAccessible(true);
						
					}
					else
					{
						
					}
				}
				else
				{
					Object valorASetear;
					
					if (esPrimitivo)
					{
						valorASetear = obtenerValorPrimitivoCasteado(nombrePrimitivo, valorPrimitivo);	
					}
					else
					{
						valorASetear = valorObjeto;
					}
					
					atributo.set(objeto, valorASetear);
				}
			}
			
			return (T)objeto;
		}
		catch(InstantiationException | IllegalAccessException | ClassNotFoundException | NoSuchFieldException ex)
		{
			throw new StructureChangedException("");
		}
	}
	
	private Object obtenerValorPrimitivoCasteado(String nombrePrimitivo, String valorPrimitivo)
	{
		switch(nombrePrimitivo.toLowerCase()) 
		{
			case "string":
				return valorPrimitivo;
			case "int":
				return Integer.parseInt(valorPrimitivo);
			case "byte":
				return Byte.parseByte(valorPrimitivo);
			case "short":
				return Short.parseShort(valorPrimitivo);
			case "long":
				return Long.parseLong(valorPrimitivo);
			case "float":
				return Float.parseFloat(valorPrimitivo);
			case "double":
				return Double.parseDouble(valorPrimitivo);
			case "char":
				return valorPrimitivo.charAt(0);
			case "boolean":
				return Boolean.parseBoolean(valorPrimitivo);
		}
		
		return null;
	}
}
